<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CHANN Wiki</title><link href="http://wiki.chann.kr/" rel="alternate"></link><link href="http://wiki.chann.kr/feeds/all.atom.xml" rel="self"></link><id>http://wiki.chann.kr/</id><updated>2015-12-31T20:00:00+09:00</updated><entry><title>Nginx와 Cloudflare를 이용하여 SSL-Only 설정하기</title><link href="http://wiki.chann.kr/dev/ssl-only-nginx-cloudflare" rel="alternate"></link><updated>2015-12-31T20:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:wiki.chann.kr,2015-12-31:dev/ssl-only-nginx-cloudflare</id><summary type="html">&lt;!--Summary: --&gt;
&lt;p&gt;아주 간단하다. &lt;code&gt;sites-enabled&lt;/code&gt;에 링크해 둔 Nginx 환경설정파일에 아래의 3줄을 추가하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cf_visitor&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;'&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kn"&gt;"scheme":"http"}')&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$server_name$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's Encrypt를 사용하는 정도의 방법이 있긴 한데, Cloudflare를 사용한다면 위의 방법이 보다 편리하고 나은 선택이 될 수 있다. 인증기간도 더 길고, Nginx 환경설정 파일의 코드 3줄이면 끝나니까.&lt;/p&gt;
&lt;p&gt;아래의 참고링크를 누르면 Apache 웹서버에서의 방법도 적혀있다. Nginx에서도 rewrite 룰을 적용해서 SSL-Only를 시도해봤는데, 무한 인다이렉션이 떠서 실패했음. Cloudflare 서비스 방식을 살펴보면 왜 그랬는지는 이해가 간다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://support.cloudflare.com/hc/en-us/articles/200170536-How-do-I-redirect-all-visitors-to-HTTPS-SSL-"&gt;Cloudflare 공식 도움말&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="dev"></category><category term="server"></category><category term="nginx"></category><category term="ssl"></category><category term="secure"></category></entry><entry><title>django 정적 페이지 만드는 법</title><link href="http://wiki.chann.kr/dev/django-static-page-guide" rel="alternate"></link><updated>2015-12-10T20:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:wiki.chann.kr,2015-12-10:dev/django-static-page-guide</id><summary type="html">&lt;!--Summary: --&gt;
&lt;blockquote&gt;
&lt;p&gt;작성중입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;django에서 정적 페이지를 만들 땐 아래의 문서를 참조하자.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.9/ref/contrib/flatpages/"&gt;django 1.9 버전 공식 문서&lt;/a&gt;&lt;/p&gt;</summary><category term="dev"></category><category term="python"></category><category term="django"></category><category term="server"></category></entry><entry><title>Pelican 설치 가이드</title><link href="http://wiki.chann.kr/pelican/how-to-install-pelican" rel="alternate"></link><updated>2015-11-21T22:20:00+09:00</updated><author><name>CHANN</name></author><id>tag:wiki.chann.kr,2015-11-21:pelican/how-to-install-pelican</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;작성중&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CHANN@CHANN-Macbook:~/git/channprj.github.io&lt;span class="o"&gt;(&lt;/span&gt;master○&lt;span class="o"&gt;)&lt;/span&gt; » git config user.name &lt;span class="s2"&gt;"channprj"&lt;/span&gt;
CHANN@CHANN-Macbook:~/git/channprj.github.io&lt;span class="o"&gt;(&lt;/span&gt;master○&lt;span class="o"&gt;)&lt;/span&gt; » git config user.email &lt;span class="s2"&gt;"chann@chann.kr"&lt;/span&gt;
CHANN@CHANN-Macbook:~/git/channprj.github.io&lt;span class="o"&gt;(&lt;/span&gt;master○&lt;span class="o"&gt;)&lt;/span&gt; » pelican-quickstart
Welcome to pelican-quickstart v3.6.3.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? GIT TO GEEK
&amp;gt; Who will be the author of this web site? CHANN
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; ko
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://git.chann.kr
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What is your &lt;span class="nb"&gt;time &lt;/span&gt;zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Seoul
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
Done. Your new project is available at /Users/CHANN/git/channprj.github.io
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pelican"></category><category term="tutorial"></category><category term="github"></category></entry><entry><title>Pelican에서 글 쓰는 법</title><link href="http://wiki.chann.kr/pelican/how-to-write-on-pelican" rel="alternate"></link><updated>2015-11-18T17:27:00+09:00</updated><author><name>CHANN</name></author><id>tag:wiki.chann.kr,2015-11-18:pelican/how-to-write-on-pelican</id><summary type="html">&lt;p&gt;Pelican에서 글을 쓰는 건 간단하다.&lt;/p&gt;
&lt;h2&gt;작성법&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── LICENSE
├── Makefile
├── __pycache__
│   └── pelicanconf.cpython-34.pyc
│
├── content  &lt;span class="c"&gt;# 이 폴더 안에 다음과 같이 xxx.md(마크다운) 파일을 넣자&lt;/span&gt;
│   ├── about.md
│   ├── hello.md
│   └── how-to-write.md
│
├── develop_server.sh
├── fabfile.py
├── pelicanconf.py
├── pelicanconf.pyc
├── publishconf.py
├── publishconf.pyc
│
└── output  &lt;span class="c"&gt;# 이 폴더가 바로 github page에 동기화되어야 할 폴더&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pelican을 사용할 때 명시해야 할 형식은 아래와 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;제목을&lt;/span&gt; &lt;span class="err"&gt;적으면&lt;/span&gt; &lt;span class="err"&gt;된다&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;카테고리를&lt;/span&gt; &lt;span class="err"&gt;적으면&lt;/span&gt; &lt;span class="err"&gt;된다&lt;/span&gt;

&lt;span class="err"&gt;그리고&lt;/span&gt; &lt;span class="err"&gt;여기에&lt;/span&gt; &lt;span class="err"&gt;내용을&lt;/span&gt; &lt;span class="err"&gt;적으면&lt;/span&gt; &lt;span class="err"&gt;된다&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내용에서의 마크다운 문법은 Git-Flavored Markdown  의 형식을 준수하면 된다.&lt;/p&gt;
&lt;p&gt;파일 제목을 영어로 작성하자. 한글로 작성시 오류가 날 확률이 있다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;Github Pages에 업로드하기&lt;/h2&gt;
&lt;p&gt;단순하니 아래의 명령어를 참고하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 펠리칸으로 빌드를 하고&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican content

&lt;span class="c"&gt;# output 폴더로 가서&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output

&lt;span class="c"&gt;# 커밋을 하고 푸시한다&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add .
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;"커밋 메시지"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;좀 더 편리한 방법으로 &lt;a href="http://wiki.chann.kr/travis-ci"&gt;Travis-CI&lt;/a&gt;를 연결하여 자동으로 푸시되게 하는 방법이 있다.&lt;/p&gt;</summary></entry><entry><title>Python, Django 등의 작업환경 설정하기</title><link href="http://wiki.chann.kr/project/django-python-initial-setting" rel="alternate"></link><updated>2015-10-13T00:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:wiki.chann.kr,2015-10-13:project/django-python-initial-setting</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;작성중&lt;/p&gt;
&lt;p&gt;이 글은 개인 기록용으로, 다소 불친절할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;OS X에서 Python 설치하기&lt;/h2&gt;
&lt;p&gt;ruby 기반의 패키지관리 툴인 brew를 사용해서 Python을 설치하자.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew update
&lt;span class="nv"&gt;$ &lt;/span&gt;brew doctor
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install python
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo easy_install pip
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install pyenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/yyuu/pyenv"&gt;Github pyenv 저장소&lt;/a&gt; 의 설명을 잘 보고 따라해야 한다. 나는 bash가 아닌 zshell을 사용하므로 &lt;code&gt;.zshrc&lt;/code&gt; 파일을 수정해주었다. 영어로 되어있지만 어려운 내용은 없으니 그냥 시키는대로 하면 된다.  &lt;/p&gt;
&lt;p&gt;제대로 설정이 되었는지 확인해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CHANN@CHANN-Macbook:~ » python
Python 3.4.0 &lt;span class="o"&gt;(&lt;/span&gt;default, Oct &lt;span class="m"&gt;26&lt;/span&gt; 2015, 06:24:28&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC 4.2.1 Compatible Apple LLVM 7.0.0 &lt;span class="o"&gt;(&lt;/span&gt;clang-700.1.76&lt;span class="o"&gt;)]&lt;/span&gt; on darwin
Type &lt;span class="s2"&gt;"help"&lt;/span&gt;, &lt;span class="s2"&gt;"copyright"&lt;/span&gt;, &lt;span class="s2"&gt;"credits"&lt;/span&gt; or &lt;span class="s2"&gt;"license"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
CHANN@CHANN-Macbook:~ »
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;python, parser, virtualenv 등 세팅&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install beautifulsoup4
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install lxml
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install requests
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install pyenv-virtualenv
&lt;span class="nv"&gt;$ &lt;/span&gt;brew install autoenv
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;Django 설치&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv virtualenv 3.4.2 kusle-3.4.2
&lt;span class="nv"&gt;$ &lt;/span&gt;pyenv shell kusle-3.4.2
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.8.6
&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject kusle .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그럼 아래와 같은 구조의 폴더가 생성된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;kusle
├── __init__.py
├── settings.py
├── urls.py
└── wsgi.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wsgi는 웹 서버 게이트웨이 인터페이스(WSGI, Web Server Gateway Interface)는 웹서버와 웹 애플리케이션의 인터페이스를 위한 파이썬 프레임워크다. Low-Level로 작성되어 웹서버와 웹 어플리케션, 프레임워크간의 벽을 허물었다.&lt;/p&gt;
&lt;p&gt;웹 어플리케이션 개발이 목적이므로, 기본적으로는 HTTP의 요청을 받아 응답을 돌려주어야 한다. 이러한 처리는 1차적으로 nginx를 통해 이뤄지는데, uwsgi라는 데몬을 사용하여 서버사이드를 처리할 예정이다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3&gt;uwsgi 설치&lt;/h3&gt;
&lt;p&gt;uwsgi의 역할은 아래와 같다.&lt;br/&gt;
client &amp;lt;-&amp;gt; the web server &amp;lt;-&amp;gt; the socket &amp;lt;-&amp;gt; uwsgi &amp;lt;-&amp;gt; Django&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; 를 통해 아래와 같이 &lt;code&gt;uwsgi&lt;/code&gt; 를 설치하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install uwsgi
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir /usr/local/etc/uwsgi/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;근데 &lt;code&gt;uwsgi&lt;/code&gt; 명령어가 자꾸 에러를 뿜는다. 중국 형님들 블로그에서 힌트를 얻어 아래와 같은 방법으로 해결을 했다. linuxbrew를 사용해서 겪는 삽질일지도 모르겠다.&lt;br/&gt;
&lt;code&gt;sudo ln -s /home/사용자/.linuxbrew/lib/libpcre.so.1 /lib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이후에 다음과 같이 테스트해보자&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uwsgi --http :8000 --module kusle.wsgi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그럼 장고 welcome 페이지가 뜰 것이다. 이제 nginx 와 연동을 하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;################# uWSGI configuration #################&lt;/span&gt;

&lt;span class="nv"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; epoll
&lt;span class="nv"&gt;ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;plugin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .
&lt;span class="nv"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timerfd
&lt;span class="nv"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; embedded
&lt;span class="nv"&gt;pcre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;filemonitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; inotify
&lt;span class="nv"&gt;malloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; libc
&lt;span class="nv"&gt;zlib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;execinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False
&lt;span class="nv"&gt;ifaddrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; expat
&lt;span class="nv"&gt;routing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;span class="nv"&gt;locking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pthread_mutex
&lt;span class="nv"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Linux
&lt;span class="nv"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; False

&lt;span class="c"&gt;############## end of uWSGI configuration #############&lt;/span&gt;
total build &lt;span class="nb"&gt;time&lt;/span&gt;: &lt;span class="m"&gt;24&lt;/span&gt; seconds
*** uWSGI is ready, launch it with /home/kusle/.pyenv/versions/kusle-3.4.2/bin/uwsgi ***
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# uwsgi.ini&lt;/span&gt;
&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="c1"&gt;# the base directory (full path)&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kusle/django&lt;/span&gt;
&lt;span class="na"&gt;project&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kusle&lt;/span&gt;

&lt;span class="na"&gt;chdir&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)&lt;/span&gt;

&lt;span class="c1"&gt;# the virtualenv (full path)&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kusle/.pyenv/versions/kusle-3.4.2&lt;/span&gt;

&lt;span class="c1"&gt;# test...&lt;/span&gt;
&lt;span class="c1"&gt;# projectdomain = kusle.kuple.kr&lt;/span&gt;
&lt;span class="c1"&gt;# protocol = uwsgi&lt;/span&gt;
&lt;span class="c1"&gt;# daemonize = /home/kusle/django/log/kusle.log&lt;/span&gt;

&lt;span class="c1"&gt;# Django's wsgi file&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kusle.wsgi&lt;/span&gt;

&lt;span class="c1"&gt;# the socket (use the full path to be safe&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kusle.sock&lt;/span&gt;

&lt;span class="c1"&gt;######&lt;/span&gt;

&lt;span class="c1"&gt;# process-related settings&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# maximum number of worker processes&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# ... with appropriate permissions - may be needed&lt;/span&gt;
&lt;span class="c1"&gt;# chmod-socket    = 664&lt;/span&gt;

&lt;span class="c1"&gt;# clear environment on exit&lt;/span&gt;
&lt;span class="c1"&gt;# vacuum          = true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마스터로 계속 돌아가는 uwsgi를 멈추는 방법은 &lt;code&gt;killall -s INT uwsgi&lt;/code&gt;명령어를 사용하면 된다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2&gt;자동으로 uWSGI 실행되도록 설정&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;description &lt;span class="s2"&gt;"uWSGI server instance configured to serve my project"&lt;/span&gt;

start on runlevel &lt;span class="o"&gt;[&lt;/span&gt;2345&lt;span class="o"&gt;]&lt;/span&gt;
stop on runlevel &lt;span class="o"&gt;[&lt;/span&gt;!2345&lt;span class="o"&gt;]&lt;/span&gt;

setuid kusle
setgid www-data

env &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/kusle/django/myprojectenv/bin
chdir /home/kusle/django
&lt;span class="nb"&gt;exec &lt;/span&gt;uwsgi --http :8000 kusle.ini
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;MariaDB 설정&lt;/h2&gt;
&lt;p&gt;Django는 기본설정으로 Sqlite3를 사용한다. 하지만 이번 프로젝트에서는 새롭게 DB를 구축하는 것 이외에 기존의 DB를 활용하는 방안도 고려중이므로, 되도록이면 같은 DB를 사용하는 것이 나을 것 같다는 판단을 하였다.&lt;/p&gt;
&lt;p&gt;먼저, DB를 새롭게 생성하자. 먼저, &lt;code&gt;$ mysql -u root -p&lt;/code&gt;를 통해 mariadb 콘솔로 접속한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt; &lt;span class="n"&gt;identified&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="s1"&gt;'{비밀번호}'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;grant&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="k"&gt;privileges&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt; &lt;span class="k"&gt;privileges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;settings.py에 그대로 드러나는 DB명, 아이디, 암호를 감추어야 하는데, 이것은 쉘 변수를 활용하면 된다. settings.py는 &lt;code&gt;import os&lt;/code&gt;를 하므로 쉘 변수를 그대로 불러올 수 있다.&lt;/p&gt;
&lt;p&gt;.bashrc 또는 .zshrc 등의 쉘 환경설정 파일에 다음과 같이 추가한다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DB이름"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DB_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DB 계정 아이디"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DB_PW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DB 계정 암호"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 settings.py의 DB 관련 코드를 아래와 같이 수정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.mysql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"DB_NAME"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"DB_ID"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"DB_PW"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치를 완료했으면 DB 연동이 제대로 되었는지 테스트를 해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;최종 트리&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django
├── 3.4.2
│   ├── bin
│   ├── lib
│   └── &lt;span class="nb"&gt;local&lt;/span&gt;
├── 404.htm
├── 50x.htm
├── db-parsing
│   ├── bs4_test2.py
│   ├── bs4_test3.py
│   └── bs4_test.py
├── index.html
├── kusle
│   ├── __init__.py
│   ├── __pycache__
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── wsgi.py.original
├── kusle.sock
├── log
│   └── kusle.log
├── manage.py
├── README.md
├── requirements.txt
├── static
│   └── admin
├── test.py
├── uwsgi.ini
└── versions
    ├── bin
    ├── lib
    └── &lt;span class="nb"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx"&gt;Digital Ocean의 uWSGI, Nginx 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ko.wikipedia.org/wiki/웹_서버_게이트웨이_인터페이스"&gt;위키피디아 wsgi 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codingdojang.com/scode/364"&gt;코딩도장의 uwsgi 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html"&gt;uWSGI Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://link2me.tistory.com/431"&gt;link2me님 블로그의 DB 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/databases/"&gt;Django DB 관련 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-mysql-or-mariadb-with-your-django-application-on-ubuntu-14-04"&gt;Digital Ocean의 MariaDB, Django 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://knot.tistory.com/97"&gt;용이님 블로그의 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/Install.html"&gt;uwsgi 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codingdojang.com/scode/373"&gt;코딩도장의 django 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://software-engineer.gatsbylee.com/uwsgi란-무엇인가-어떻게-사용해야-하는가/"&gt;gatsby님 블로그의 관련글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tutorial.djangogirls.org/ko/django_models/index.html"&gt;djangogirls 홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.hannal.com"&gt;hannal님 블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="ku"></category><category term="django"></category><category term="python"></category><category term="init"></category></entry><entry><title>강의 편람 DB 파싱</title><link href="http://wiki.chann.kr/project/ku-lecture-db-parsing" rel="alternate"></link><updated>2015-10-08T00:00:00+09:00</updated><author><name>CHANN</name></author><id>tag:wiki.chann.kr,2015-10-08:project/ku-lecture-db-parsing</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;작성중&lt;/p&gt;
&lt;p&gt;이 글은 개인 기록용으로, 다소 불친절할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;강의평가 시스템을 구축하기 전에, 먼저 강의 편람 정보를 가지고 있어야 한다.&lt;br/&gt;
고려대는 강의편람을 xml 등의 형식으로 따로 제공하지 않으므로, html 파싱을 해서 추출해야 한다.&lt;br/&gt;
추출하기 전에 앞서 소스 URL을 찾아내야만 했다.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://sugang.korea.ac.kr&lt;/code&gt; 의 코드를 면밀히 분석한 결과, 아래의 URL을 찾아낼 수 있었다.&lt;br/&gt;
아래의 주소를 통해 수강 편람을 파싱받아 DB에 뼈대를 저장해 두면 될 것 같다.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://infodepot.korea.ac.kr/lecture/LecMajorSub.jsp?yy=2010&amp;amp;tm=1R&amp;amp;col=4460&amp;amp;dept=4548&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;아래의 코드를 참고하여 GET으로 값을 전달하면 쉽게 HTML 파싱을 할 수 있다.&lt;br/&gt;
각 변수별 값은 &lt;code&gt;html&lt;/code&gt;과 &lt;code&gt;js&lt;/code&gt;를 통해 추출 가능하다.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"yy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"2015"&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2015년&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"2014"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2014년&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1R"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1S"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;여름학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"2R"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"2W"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;겨울학기&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"SC"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;국제하계대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"changeCol(frm_ms, this, frm_ms.dept);"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0137"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;법과대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0140"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;경영대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0143"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;문과대학&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"4652"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;생명과학대학  &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"4460"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;과학기술대학&lt;span class="nt"&gt;&amp;lt;/optin&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"dept"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"4548"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: black;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;컴퓨터정보학과 &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"4549"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: black;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;정보통계학과   &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"4550"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: black;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;전자및정보공학부 &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parser는 &lt;code&gt;Python&lt;/code&gt;의 &lt;code&gt;Beautiful Soup&lt;/code&gt; 라이브러리를 사용하면 편리할 것 같다.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3&gt;Making the soup&lt;/h3&gt;
&lt;p&gt;아래의 코드는 링크를 모두 가져오는 bs4 예제다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://kuple.kr/free"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://zevross.com/blog/2014/05/16/using-the-python-library-beautifulsoup-to-extract-data-from-a-webpage-applied-to-world-cup-rankings/"&gt;zevross의 블로그 글&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidocs.net/book/1"&gt;점프 투 파이썬&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="ku"></category><category term="db"></category><category term="parsing"></category><category term="python"></category></entry></feed>